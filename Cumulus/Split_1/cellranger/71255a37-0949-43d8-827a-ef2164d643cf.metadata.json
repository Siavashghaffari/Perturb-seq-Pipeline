{
    "workflowName": "cellranger_workflow",
    "workflowProcessingEvents": [
        {
            "cromwellId": "cromid-33574f0",
            "description": "PickedUp",
            "timestamp": "2024-07-02T23:22:32.179Z",
            "cromwellVersion": "84"
        },
        {
            "cromwellId": "cromid-33574f0",
            "description": "Finished",
            "timestamp": "2024-07-03T04:48:53.087Z",
            "cromwellVersion": "84"
        }
    ],
    "actualWorkflowLanguageVersion": "1.0",
    "submittedFiles": {
        "workflow": "version 1.0\n\nimport \"https://raw.githubusercontent.com/lilab-bcb/cumulus/2.5.0/workflows/cellranger/cellranger_workflow.wdl\" as crw\nimport \"cumulus2dsdb.wdl\" as dsdb\nimport \"archr.wdl\" as ar\nimport \"immcantation.wdl\" as imm\n\nworkflow cellranger_workflow {\n    input {\n        # 6 - 10 columns (Library, Reference, Flowcell, Lane, Index, Sample, [Chemistry, DataType, FeatureBarcodeFile, Link]).\n        File input_csv_file\n        # Output directory, URL\n        String output_directory\n        # If run mkfastq\n        Boolean run_mkfastq = false\n        # If run count\n        Boolean run_count = true\n\n        # for mkfastq\n        # Whether to delete input_bcl_directory, default: false\n        Boolean delete_input_bcl_directory = false\n        # Number of allowed mismatches per index\n        Int? mkfastq_barcode_mismatches\n        # If 10x-supplied i7/i5 paired indices are specified, but the flowcell was run with only one sample index, allow the demultiplex to proceed using the i7 half of the sample index pair\n        Boolean mkfastq_force_single_index = false\n        # Only demultiplex samples identified by an i7-only sample index, ignoring dual-indexed samples.  Dual-indexed samples will not be demultiplexed.\n        Boolean mkfastq_filter_single_index = false\n        # Override the read lengths as specified in RunInfo.xml\n        String? mkfastq_use_bases_mask\n        # Delete undetermined FASTQ files generated by bcl2fastq2\n        Boolean mkfastq_delete_undetermined = false\n\n\n        # For cellranger count\n        # Force pipeline to use this number of cells, bypassing the cell detection algorithm, mutually exclusive with expect_cells.\n        Int? force_cells\n        # Expected number of recovered cells. Mutually exclusive with force_cells\n        Int? expect_cells\n        # If count reads mapping to intronic regions\n        Boolean include_introns = true\n        # If generate bam outputs. This is also a spaceranger argument.\n        Boolean no_bam = false\n        # Perform secondary analysis of the gene-barcode matrix (dimensionality reduction, clustering and visualization). Default: false.\n        Boolean secondary = false\n\n        # For vdj\n        # Do not align reads to reference V(D)J sequences before de novo assembly. Default: false\n        Boolean vdj_denovo = false\n        # Whether run Immcantation or not\n        Boolean run_immcantation = true\n        # Immcantation version to use\n        String immcantation_version = \"4.3.0\"\n\n\n        # Force the analysis to be carried out for a particular chain type. The accepted values are:\n        #   \"auto\" for auto detection based on TR vs IG representation (default),\n        #   \"TR\" for T cell receptors,\n        #   \"IG\" for B cell receptors,\n        # Use this in rare cases when automatic chain detection fails.\n        String vdj_chain = \"auto\"\n\n        # For extracting ADT count\n\n        # Barcode start position at Read 2 (0-based coordinate) for CRISPR\n        Int? crispr_barcode_pos\n        # scaffold sequence for Perturb-seq, default is \"\", which for Perturb-seq means barcode starts at position 0 of read 2\n        String scaffold_sequence = \"\"\n        # maximum hamming distance in feature barcodes (change default to 2)\n        Int max_mismatch = 2\n        # minimum read count ratio (non-inclusive) to justify a feature given a cell barcode and feature combination, only used for data type crispr\n        Float min_read_ratio = 0.1\n\n        # For atac\n\n        # For atac, choose the algorithm for dimensionality reduction prior to clustering and tsne: 'lsa' (default), 'plsa', or 'pca'.\n        String? atac_dim_reduce = \"lsa\"\n        # A BED file to override peak caller\n        File? peaks\n\n        # For arc\n\n        # Disable counting of intronic reads.\n        Boolean arc_gex_exclude_introns = false\n        # Cell caller override: define the minimum number of ATAC transposition events in peaks (ATAC counts) for a cell barcode.\n        Int? arc_min_atac_count\n        # Cell caller override: define the minimum number of GEX UMI counts for a cell barcode.\n        Int? arc_min_gex_count\n\n        # For multi\n\n        # CMO set CSV file, delaring CMO constructs and associated barcodes\n        File? cmo_set\n\n        # For archr\n\n        # Whether run ArchR or not\n        Boolean run_archr = true\n        # Minimum transcription start site (TSS) enrichment score required for a cell to pass filtering for use in downstream analyses.\n        String minTSS = \"4\"\n        # Minimum number of mapped ATAC-seq fragments required per cell to pass filtering for use in downstream analyses.\n        String minFrags = \"1000\"\n        # Maximum number of mapped ATAC-seq fragments required per cell to pass filtering for use in downstream analyses.\n        String maxFrags = \"Inf\"\n\n        String archr_version = \"1.0.1\"\n        String cellranger_version = \"7.2.0\"\n        String cumulus_feature_barcoding_version = \"0.11.2\"\n        String cellranger_atac_version = \"2.1.0\"\n        String cellranger_arc_version = \"2.0.2\"\n        String config_version = \"0.3\"\n\n\n        # Which docker registry to use: quay.io/cumulus (default) or cumulusprod\n        String docker_registry = \"quay.io/cumulus\"\n        # Number of cpus per cellranger and spaceranger job\n        Int num_cpu = 32\n        # Memory string\n        String memory = \"120G\"\n\n        # Number of threads\n        Int arrow_prj_num_cpu = 8\n        # Number of threads\n        Int arrow_num_cpu = 8\n        # Number of cpus for cellranger-atac count\n        Int atac_num_cpu = 32\n\n        # Memory string for archr\n        String archr_memory = \"32G\"\n        # Memory string for cellranger-atac count\n        String atac_memory = \"120G\"\n\n        # Number of cpus for cumulus_adt\n        Int feature_num_cpu = 4\n        # Optional memory string for cumulus_adt\n        String feature_memory = \"32G\"\n\n        # Number of cpus for cellranger-arc count\n        Int arc_num_cpu = 32\n        # Memory string for cellranger-arc count\n        String arc_memory = \"160G\"\n\n        # Optional disk space for archr.\n        Int archr_disk_space = 50\n        # Optional disk space for mkfastq.\n        Int mkfastq_disk_space = 1500\n        # Optional disk space needed for cell ranger count.\n        Int count_disk_space = 500\n        # Optional disk space needed for cell ranger multi.\n        Int multi_disk_space = 1500\n        # Optional disk space needed for cell ranger vdj.\n        Int vdj_disk_space = 500\n        # Optional disk space needed for cumulus_adt\n        Int feature_disk_space = 100\n        # Optional disk space needed for cellranger-atac count\n        Int atac_disk_space = 500\n        # Optional disk space needed for cellranger-arc count\n        Int arc_disk_space = 700\n        # Optional number of CPUs for DSDB step\n        Int dsdb_num_cpu = 4\n        # Optional memory for DSDB step\n        String dsdb_memory = \"50G\"\n        # Optional disk space (in GB) for DSDB step\n        Int dsdb_disk_space = 100\n\n        # Number of preemptible tries\n        Int preemptible = 2\n        # AWS priority queue Arn string.\n        String aws_job_queue = \"arn:aws:batch:us-west-2:752311211819:job-queue/priority-gred-cumulus\"\n\n        # If register data to DataSetDB\n        Boolean write_to_dsdb = true\n        String dsdb_project_authors = \"\"\n        String dsdb_project_title = \"\"\n        String dsdb_project_description = \"\"\n        Boolean dsdb_testing = false\n    }\n\n    # Cloud backend\n    String backend = if sub(output_directory, \"^s3://.+$\", \"aws\") == \"aws\" then \"aws\" else \"gcp\"\n\n    # Index TSV file\n    String acronym_file = if backend == \"aws\" then \"s3://gred-cumulus-ref/resources/cellranger/index.tsv\" else \"gs://gred-cumulus-ref/resources/cellranger/index.tsv\"\n    # Genomitory index file\n    String gmty_index_file = if backend == \"aws\" then \"s3://gred-cumulus-ref/resources/gmty_index.tsv\" else \"gs://gred-cumulus-ref/resources/gmty_index.tsv\"\n    # Organism index file\n    String organism_index_file = if backend == \"aws\" then \"s3://gred-cumulus-ref/resources/organism_index.tsv\" else \"gs://gred-cumulus-ref/resources/organism_index.tsv\"\n    # Cumulus project's private registry.\n    String cumulus_private_registry = if backend == \"aws\" then \"752311211819.dkr.ecr.us-west-2.amazonaws.com\" else \"gcr.io/gred-cumulus-sb-01-991a49c4\"\n    # Google cloud zones, default to Roche Science Cloud zones\n    String zones = \"us-west1-a us-west1-b us-west1-c\"\n\n    # Cloud URI of this job.\n    String dsdb_project_uri = sub(output_directory, \"[/\\\\s]+$\", \"\")\n\n\n    call generate_cellranger_config {\n       input:\n           input_csv_file = input_csv_file,\n           gmty_index_file = gmty_index_file,\n           write_to_dsdb = write_to_dsdb,\n           backend = backend,\n           zones = zones,\n           preemptible = preemptible,\n           docker_registry = docker_registry,\n           config_version = config_version,\n           awsQueueArn = aws_job_queue\n    }\n\n    call crw.cellranger_workflow as cellranger_workflow {\n        input:\n            input_csv_file = generate_cellranger_config.cellranger_sample_sheet,\n            output_directory = output_directory,\n            run_mkfastq = run_mkfastq,\n            run_count = run_count,\n            delete_input_bcl_directory = delete_input_bcl_directory,\n            mkfastq_barcode_mismatches = mkfastq_barcode_mismatches,\n            mkfastq_force_single_index = mkfastq_force_single_index,\n            mkfastq_filter_single_index = mkfastq_filter_single_index,\n            mkfastq_use_bases_mask = mkfastq_use_bases_mask,\n            mkfastq_delete_undetermined = mkfastq_delete_undetermined,\n            force_cells = force_cells,\n            expect_cells = expect_cells,\n            include_introns = include_introns,\n            no_bam = no_bam,\n            secondary = secondary,\n            vdj_denovo = vdj_denovo,\n            vdj_chain = vdj_chain,\n            crispr_barcode_pos = crispr_barcode_pos,\n            scaffold_sequence = scaffold_sequence,\n            max_mismatch = max_mismatch,\n            min_read_ratio = min_read_ratio,\n            atac_dim_reduce = atac_dim_reduce,\n            peaks = peaks,\n            arc_gex_exclude_introns = arc_gex_exclude_introns,\n            arc_min_atac_count = arc_min_atac_count,\n            arc_min_gex_count = arc_min_gex_count,\n            cmo_set = cmo_set,\n            acronym_file = acronym_file,\n            cellranger_version = cellranger_version,\n            cumulus_feature_barcoding_version = cumulus_feature_barcoding_version,\n            cellranger_atac_version = cellranger_atac_version,\n            cellranger_arc_version = cellranger_arc_version,\n            config_version = config_version,\n            docker_registry = docker_registry,\n            mkfastq_docker_registry = cumulus_private_registry,\n            zones = zones,\n            backend = backend,\n            num_cpu = num_cpu,\n            memory = memory,\n            atac_num_cpu = atac_num_cpu,\n            atac_memory = atac_memory,\n            feature_num_cpu = feature_num_cpu,\n            feature_memory = feature_memory,\n            arc_num_cpu = arc_num_cpu,\n            arc_memory = arc_memory,\n            mkfastq_disk_space = mkfastq_disk_space,\n            count_disk_space = count_disk_space,\n            multi_disk_space = multi_disk_space,\n            vdj_disk_space = vdj_disk_space,\n            feature_disk_space = feature_disk_space,\n            atac_disk_space = atac_disk_space,\n            arc_disk_space = arc_disk_space,\n            preemptible = preemptible,\n            awsQueueArn = aws_job_queue\n    }\n\n    if (defined(cellranger_workflow.count_outputs[\"atac\"]) && run_archr) {\n        call ar.archr as archr_atac_workflow {\n            input:\n                input_type = \"atac\",\n                input_paths = select_first([cellranger_workflow.count_outputs[\"atac\"]]),\n                genome = generate_cellranger_config.atac_genome,\n                minTSS = minTSS,\n                minFrags = minFrags,\n                maxFrags = maxFrags,\n                output_directory = output_directory,\n                archr_version = archr_version,\n                arrow_num_cpu = arrow_num_cpu,\n                arrow_prj_num_cpu = arrow_prj_num_cpu,\n                memory = archr_memory,\n                disk_space = archr_disk_space,\n                preemptible = preemptible,\n                awsQueueArn = aws_job_queue\n        }\n    }\n\n    if (defined(cellranger_workflow.count_outputs[\"arc\"]) && run_archr) {\n        call ar.archr as archr_arc_workflow {\n            input:\n                input_type = \"arc\",\n                input_paths = select_first([cellranger_workflow.count_outputs[\"arc\"]]),\n                genome = generate_cellranger_config.atac_genome,\n                minTSS = minTSS,\n                minFrags = minFrags,\n                maxFrags = maxFrags,\n                output_directory = output_directory,\n                archr_version = archr_version,\n                arrow_num_cpu = arrow_num_cpu,\n                arrow_prj_num_cpu = arrow_prj_num_cpu,\n                memory = archr_memory,\n                disk_space = archr_disk_space,\n                preemptible = preemptible,\n                awsQueueArn = aws_job_queue\n        }\n    }\n\n    if (defined(cellranger_workflow.count_outputs[\"vdj\"]) && run_immcantation) {\n        call imm.immcantation as immcantation {\n            input:\n                vdj_folders = select_first([cellranger_workflow.count_outputs[\"vdj\"]]),\n                species = generate_cellranger_config.vdj_species,\n                version = immcantation_version,\n                docker_registry = cumulus_private_registry,\n                preemptible = preemptible,\n                awsQueueArn = aws_job_queue\n        }\n    }\n\n    if (write_to_dsdb) {\n        call dsdb.cellranger_dsdb as cellranger_dsdb {\n            input:\n                map_file = generate_cellranger_config.mapping_csv,\n                count_outputs = cellranger_workflow.count_outputs,\n                output_directory = output_directory,\n                gmty_index_file = gmty_index_file,\n                organism_index_file = organism_index_file,\n                gex_genome = generate_cellranger_config.gex_genome,\n                atac_genome = generate_cellranger_config.atac_genome,\n                project_uri = dsdb_project_uri,\n                project_authors = dsdb_project_authors,\n                project_title = dsdb_project_title,\n                project_description = dsdb_project_description,\n                project_testing = dsdb_testing,\n                private_docker_registry = cumulus_private_registry,\n                public_docker_registry = docker_registry,\n                config_version = config_version,\n                backend = backend,\n                num_cpu = dsdb_num_cpu,\n                memory = dsdb_memory,\n                zones = zones,\n                disk_space = dsdb_disk_space,\n                preemptible = preemptible,\n                awsQueueArn = aws_job_queue,\n                archr_output = [archr_atac_workflow.archr_project, archr_arc_workflow.archr_project],\n                immcantation_output = immcantation.output_dirs\n        }\n    }\n\n    output {\n        String? count_matrix = cellranger_workflow.count_matrix\n        Map[String, Array[String]?] count_outputs = cellranger_workflow.count_outputs\n        Array[Array[String]?] fastq_outputs = cellranger_workflow.fastq_outputs\n        String? archr_atac_output_dir = archr_atac_workflow.archr_project\n        String? archr_arc_output_dir = archr_arc_workflow.archr_project\n        Array[Map[String, String]]? dsdb_info = cellranger_dsdb.dsdb_info\n        File? dsdb_info_json = cellranger_dsdb.dsdb_info_json\n        Array[String]? output_changeo_directory = immcantation.output_dirs\n    }\n}\n\ntask generate_cellranger_config {\n    input {\n        File input_csv_file\n        File gmty_index_file\n        Boolean write_to_dsdb\n        String backend\n        String zones\n        Int preemptible\n        String docker_registry\n        String config_version\n        String awsQueueArn\n    }\n\n    command <<<\n\n        python <<CODE\n\n        import pandas as pd\n\n        samplesheet = pd.read_csv(\"~{input_csv_file}\", header = 0, dtype = str, index_col = False)\n        samplesheet.columns = samplesheet.columns.str.strip()\n\n        if \"DataType\" not in samplesheet.columns:\n            samplesheet[\"DataType\"] = \"rna\"\n        else:\n            samplesheet.loc[samplesheet[\"DataType\"].isna(), \"DataType\"] = \"rna\"\n\n        # Generate mapping csv for DSDB operations.\n        if \"~{write_to_dsdb}\" == \"true\":\n            if  set([\"Sample\", \"Library\", \"DataType\", \"Reference\"]).issubset(samplesheet) and (\"Library\" in samplesheet.columns):\n                cols_needed = [\"Sample\", \"Library\", \"DataType\", \"Reference\"]\n                if \"Link\" in samplesheet.columns:\n                    cols_needed.append(\"Link\")\n                samplesheet[cols_needed].drop_duplicates(\"Library\").to_csv(\"mapping.csv\", index=False)\n            else:\n                raise Exception(\"If writing to DataSetDB, columns 'Sample' and 'Library' are both required!\")\n        else:\n            if \"Library\" not in samplesheet.columns:\n                raise Exception(\"Column 'Library' is required in the sample sheet!\")\n\n            cols_needed = [\"Library\", \"Reference\", \"DataType\"]\n            if \"Link\" in samplesheet.columns:\n                cols_needed.append(\"Link\")\n            samplesheet[cols_needed].to_csv(\"mapping.csv\", index=False)\n\n        # Get reference genome name for RNA libraries.\n        df_gmty = pd.read_csv(\"~{gmty_index_file}\", header=None, dtype=str, index_col=False, sep='\\t')\n        df_rna = samplesheet.loc[samplesheet[\"DataType\"]==\"rna\"]\n        with open(\"gex_genome.txt\", \"w\") as fout:\n            if (not df_rna.empty) and (\"~{write_to_dsdb}\" == \"true\"):\n                if df_rna[\"Reference\"].nunique() == 1:\n                    gex_genome_keyword = df_rna[\"Reference\"].values[0]\n                    if gex_genome_keyword in df_gmty[0].values:\n                        fout.write(gex_genome_keyword)\n                    else:\n                        fout.write(\"null\")\n                else:\n                    raise Exception(\"If writing to DataSetDB, all libraries of 'rna' type must have the same reference genome!\")\n            else:\n                fout.write(\"null\")\n\n        # Generate genome names for ATAC and VDJ libraries.\n        vdj_dict = dict()\n        vdj_dict[\"GRCh38_vdj_v7.0.0\"] = \"human\"\n        vdj_dict[\"GRCm38_vdj_v7.0.0\"] = \"mouse\"\n        vdj_dict[\"GRCh38_vdj_v5.0.0\"] = \"human\"\n        vdj_dict[\"GRCm38_vdj_v5.0.0\"] = \"mouse\"\n\n        atac_dict = dict()\n        atac_dict[\"GRCh38-2020-A_arc_v2.0.0\"] = \"GRCh38\"\n        atac_dict[\"mm10-2020-A_arc_v2.0.0\"] = \"GRCm38\"\n\n        df_atac = samplesheet.loc[samplesheet[\"DataType\"]==\"atac\"]\n        with open(\"atac_genome.txt\", \"w\") as fout:\n            if not df_atac.empty:\n                if df_atac[\"Reference\"].nunique() != 1:\n                    raise Exception(\"ATAC libraries must have the same Reference!\")\n                fout.write(df_atac[\"Reference\"].apply(lambda s: atac_dict[s]).values[0]+\"\\n\")\n            else:\n                fout.write(\"null\")\n\n        df_vdj = samplesheet.loc[samplesheet[\"DataType\"]==\"vdj\"]\n        if not df_vdj.empty:\n            df_vdj[\"Reference\"].apply(lambda s: vdj_dict[s]).to_csv(\"vdj_species.txt\", index=False, header=False)\n        else:\n            with open(\"vdj_species.txt\", \"w\") as fout:\n                fout.write(\"null\")\n\n        # Generate Cellranger input sample sheet.\n        df_cellranger = samplesheet.copy()\n        if \"Sample\" in df_cellranger.columns:\n            df_cellranger.drop(columns=[\"Sample\"], inplace=True)\n        df_cellranger.rename(columns={\"Library\": \"Sample\"}, inplace=True)\n        df_cellranger.to_csv(\"cellranger_sample_sheet.csv\", index=False)\n        CODE\n    >>>\n\n    output {\n        File cellranger_sample_sheet = \"cellranger_sample_sheet.csv\"\n        File mapping_csv = \"mapping.csv\"\n        String gex_genome = read_string(\"gex_genome.txt\")\n        String atac_genome = read_string(\"atac_genome.txt\")\n        Array[String] vdj_species = read_lines(\"vdj_species.txt\")\n    }\n\n    runtime {\n        docker: \"~{docker_registry}/config:~{config_version}\"\n        zones: zones\n        preemptible: preemptible\n        queueArn: awsQueueArn\n    }\n}\n",
        "root": "",
        "options": "{\n  \"read_from_cache\": false\n}",
        "inputs": "{\"cellranger_workflow.crispr_barcode_pos\":19,\"cellranger_workflow.dsdb_disk_space\":\"5000\",\"cellranger_workflow.dsdb_memory\":\"120G\",\"cellranger_workflow.dsdb_project_authors\":\"melocars,ghaffars,borozani\",\"cellranger_workflow.dsdb_project_description\":\"Production scale screen in DLD-1 cells with 1/4 of the genome-wide CRISPR library (sub-lib-3, ~22K guides). 1 time point: Day-5. We performed 24 rxns of 10x 3' HT kit with an estimated loading of 52K cells. We performed a pilot study to test the library quality before the production-level sequencing. We will submit 72 libraries (24 GEX, 24 HTO and 24 sgRNA) We request 600M reads for GEX, 20M for HTO and 40M for sgRNA, after finishing QC sequencing of NGS5887. NGS has built the GEX and sgRNA libraries using automation, we will provide manually constructed HTO libraries.\",\"cellranger_workflow.dsdb_project_title\":\"Recursion DLD1 Library3- Screen2 (NGS5888)\",\"cellranger_workflow.expect_cells\":20000,\"cellranger_workflow.input_csv_file\":\"gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/uploads/samplesheet_SAM24456643_1.csv\",\"cellranger_workflow.max_mismatch\":0,\"cellranger_workflow.output_directory\":\"gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/\",\"cellranger_workflow.run_mkfastq\":false,\"cellranger_workflow.write_to_dsdb\":true}",
        "workflowUrl": "",
        "labels": "{\"creator\": \"ghaffars\"}"
    },
    "calls": {
        "cellranger_workflow.cellranger_workflow": [
            {
                "executionStatus": "Done",
                "shardIndex": -1,
                "outputs": {
                    "count_outputs": {
                        "fbc": null,
                        "atac": null,
                        "arc": null,
                        "adt": [
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238830_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238854_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238831_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238855_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238832_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238856_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238833_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238857_SAM24456643"
                        ],
                        "vdj": null,
                        "multi": null,
                        "gex": [
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238806_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238807_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238808_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238809_SAM24456643"
                        ]
                    },
                    "fastq_outputs": [
                        null,
                        null,
                        null
                    ],
                    "count_matrix": "gs://gred-cumulus-output/cromwell_execution/cellranger_workflow/71255a37-0949-43d8-827a-ef2164d643cf/call-cellranger_workflow/cellranger_workflow/a7cbed0d-3a48-4aeb-b4ce-7567159466e4/call-generate_count_config/count_matrix.csv"
                },
                "inputs": {
                    "cellranger_version": "7.2.0",
                    "mkfastq_delete_undetermined": false,
                    "atac_dim_reduce": "lsa",
                    "awsQueueArn": "arn:aws:batch:us-west-2:752311211819:job-queue/priority-gred-cumulus",
                    "acronym_file": "gs://gred-cumulus-ref/resources/cellranger/index.tsv",
                    "atac_memory": "120G",
                    "cellranger_atac_version": "2.1.0",
                    "count_disk_space": 500,
                    "min_read_ratio": 0.1,
                    "mkfastq_force_single_index": false,
                    "memory": "120G",
                    "atac_num_cpu": 32,
                    "include_introns": true,
                    "multi_disk_space": 1500,
                    "cumulus_feature_barcoding_version": "0.11.2",
                    "mkfastq_docker_registry": "gcr.io/gred-cumulus-sb-01-991a49c4",
                    "arc_disk_space": 700,
                    "cmo_set": null,
                    "preemptible": 2,
                    "feature_disk_space": 100,
                    "cellranger_count_fbc.chemistry": "auto",
                    "max_mismatch": 0,
                    "vdj_chain": "auto",
                    "force_cells": null,
                    "run_mkfastq": false,
                    "num_cpu": 32,
                    "vdj_denovo": false,
                    "scaffold_sequence": "",
                    "mkfastq_filter_single_index": false,
                    "no_bam": false,
                    "arc_min_gex_count": null,
                    "arc_min_atac_count": null,
                    "secondary": false,
                    "arc_num_cpu": 32,
                    "expect_cells": 20000,
                    "cellranger_arc_version": "2.0.2",
                    "output_directory": "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/",
                    "feature_num_cpu": 4,
                    "arc_gex_exclude_introns": false,
                    "atac_disk_space": 500,
                    "docker_registry": "quay.io/cumulus",
                    "mkfastq_barcode_mismatches": null,
                    "crispr_barcode_pos": 19,
                    "arc_memory": "160G",
                    "mkfastq_use_bases_mask": null,
                    "run_count": true,
                    "input_csv_file": "gs://gred-cumulus-output/cromwell_execution/cellranger_workflow/71255a37-0949-43d8-827a-ef2164d643cf/call-generate_cellranger_config/cellranger_sample_sheet.csv",
                    "backend": "gcp",
                    "mkfastq_disk_space": 1500,
                    "config_version": "0.3",
                    "delete_input_bcl_directory": false,
                    "peaks": null,
                    "feature_memory": "32G",
                    "vdj_disk_space": 500,
                    "zones": "us-west1-a us-west1-b us-west1-c"
                },
                "end": "2024-07-03T04:24:50.898Z",
                "attempt": 1,
                "executionEvents": [
                    {
                        "startTime": "2024-07-02T23:27:27.480Z",
                        "description": "SubWorkflowRunningState",
                        "endTime": "2024-07-03T04:24:47.186Z"
                    },
                    {
                        "startTime": "2024-07-02T23:27:27.473Z",
                        "description": "SubWorkflowPendingState",
                        "endTime": "2024-07-02T23:27:27.473Z"
                    },
                    {
                        "startTime": "2024-07-02T23:27:27.473Z",
                        "description": "WaitingForValueStore",
                        "endTime": "2024-07-02T23:27:27.473Z"
                    },
                    {
                        "startTime": "2024-07-02T23:27:27.473Z",
                        "description": "SubWorkflowPreparingState",
                        "endTime": "2024-07-02T23:27:27.480Z"
                    }
                ],
                "start": "2024-07-02T23:27:27.472Z",
                "subWorkflowId": "a7cbed0d-3a48-4aeb-b4ce-7567159466e4"
            }
        ],
        "cellranger_workflow.cellranger_dsdb": [
            {
                "executionStatus": "Done",
                "shardIndex": -1,
                "outputs": {
                    "dsdb_info": [
                        {
                            "type": "GEX",
                            "id": "DS000017732",
                            "version": "1"
                        }
                    ],
                    "monitoringLogs": [
                        "gs://gred-cumulus-output/cromwell_execution/cellranger_workflow/71255a37-0949-43d8-827a-ef2164d643cf/call-cellranger_dsdb/cellranger_dsdb/2958a2cb-82b7-4e64-8967-37d0b42baf6b/call-gex_dsdb/monitoring.log"
                    ],
                    "dsdb_info_json": "gs://gred-cumulus-output/cromwell_execution/cellranger_workflow/71255a37-0949-43d8-827a-ef2164d643cf/call-cellranger_dsdb/cellranger_dsdb/2958a2cb-82b7-4e64-8967-37d0b42baf6b/call-organize_dsdb_info/dsdb_info.json"
                },
                "inputs": {
                    "map_file": "gs://gred-cumulus-output/cromwell_execution/cellranger_workflow/71255a37-0949-43d8-827a-ef2164d643cf/call-generate_cellranger_config/mapping.csv",
                    "num_cpu": 4,
                    "project_title": "Recursion DLD1 Library3- Screen2 (NGS5888)",
                    "awsQueueArn": "arn:aws:batch:us-west-2:752311211819:job-queue/priority-gred-cumulus",
                    "count_outputs": {
                        "fbc": null,
                        "atac": null,
                        "arc": null,
                        "adt": [
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238830_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238854_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238831_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238855_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238832_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238856_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238833_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238857_SAM24456643"
                        ],
                        "vdj": null,
                        "multi": null,
                        "gex": [
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238806_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238807_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238808_SAM24456643",
                            "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238809_SAM24456643"
                        ]
                    },
                    "project_testing": false,
                    "immcantation_output": null,
                    "project_description": "Production scale screen in DLD-1 cells with 1/4 of the genome-wide CRISPR library (sub-lib-3, ~22K guides). 1 time point: Day-5. We performed 24 rxns of 10x 3' HT kit with an estimated loading of 52K cells. We performed a pilot study to test the library quality before the production-level sequencing. We will submit 72 libraries (24 GEX, 24 HTO and 24 sgRNA) We request 600M reads for GEX, 20M for HTO and 40M for sgRNA, after finishing QC sequencing of NGS5887. NGS has built the GEX and sgRNA libraries using automation, we will provide manually constructed HTO libraries.",
                    "gmty_index_file": "gs://gred-cumulus-ref/resources/gmty_index.tsv",
                    "organism_index_file": "gs://gred-cumulus-ref/resources/organism_index.tsv",
                    "gex_genome": "null",
                    "memory": "120G",
                    "archr_output": [
                        null,
                        null
                    ],
                    "preemptible": 2,
                    "disk_space": 5000,
                    "project_authors": "melocars,ghaffars,borozani",
                    "private_docker_registry": "gcr.io/gred-cumulus-sb-01-991a49c4",
                    "atac_genome": "null",
                    "output_directory": "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/",
                    "backend": "gcp",
                    "public_docker_registry": "quay.io/cumulus",
                    "config_version": "0.3",
                    "zones": "us-west1-a us-west1-b us-west1-c",
                    "project_uri": "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1"
                },
                "end": "2024-07-03T04:48:50.895Z",
                "attempt": 1,
                "executionEvents": [
                    {
                        "startTime": "2024-07-03T04:24:54.522Z",
                        "description": "SubWorkflowPreparingState",
                        "endTime": "2024-07-03T04:24:54.528Z"
                    },
                    {
                        "startTime": "2024-07-03T04:24:54.514Z",
                        "description": "SubWorkflowPendingState",
                        "endTime": "2024-07-03T04:24:54.515Z"
                    },
                    {
                        "startTime": "2024-07-03T04:24:54.528Z",
                        "description": "SubWorkflowRunningState",
                        "endTime": "2024-07-03T04:48:46.015Z"
                    },
                    {
                        "startTime": "2024-07-03T04:24:54.515Z",
                        "description": "WaitingForValueStore",
                        "endTime": "2024-07-03T04:24:54.522Z"
                    }
                ],
                "start": "2024-07-03T04:24:54.513Z",
                "subWorkflowId": "2958a2cb-82b7-4e64-8967-37d0b42baf6b"
            }
        ],
        "cellranger_workflow.generate_cellranger_config": [
            {
                "preemptible": true,
                "executionStatus": "Done",
                "stdout": "gs://gred-cumulus-output/cromwell_execution/cellranger_workflow/71255a37-0949-43d8-827a-ef2164d643cf/call-generate_cellranger_config/stdout",
                "commandLine": "python <<CODE\n\nimport pandas as pd\n\nsamplesheet = pd.read_csv(\"/cromwell_root/gred-melo-carlos-lab/NGS5888/SAM24456643_1/uploads/samplesheet_SAM24456643_1.csv\", header = 0, dtype = str, index_col = False)\nsamplesheet.columns = samplesheet.columns.str.strip()\n\nif \"DataType\" not in samplesheet.columns:\n    samplesheet[\"DataType\"] = \"rna\"\nelse:\n    samplesheet.loc[samplesheet[\"DataType\"].isna(), \"DataType\"] = \"rna\"\n\n# Generate mapping csv for DSDB operations.\nif \"true\" == \"true\":\n    if  set([\"Sample\", \"Library\", \"DataType\", \"Reference\"]).issubset(samplesheet) and (\"Library\" in samplesheet.columns):\n        cols_needed = [\"Sample\", \"Library\", \"DataType\", \"Reference\"]\n        if \"Link\" in samplesheet.columns:\n            cols_needed.append(\"Link\")\n        samplesheet[cols_needed].drop_duplicates(\"Library\").to_csv(\"mapping.csv\", index=False)\n    else:\n        raise Exception(\"If writing to DataSetDB, columns 'Sample' and 'Library' are both required!\")\nelse:\n    if \"Library\" not in samplesheet.columns:\n        raise Exception(\"Column 'Library' is required in the sample sheet!\")\n\n    cols_needed = [\"Library\", \"Reference\", \"DataType\"]\n    if \"Link\" in samplesheet.columns:\n        cols_needed.append(\"Link\")\n    samplesheet[cols_needed].to_csv(\"mapping.csv\", index=False)\n\n# Get reference genome name for RNA libraries.\ndf_gmty = pd.read_csv(\"/cromwell_root/gred-cumulus-ref/resources/gmty_index.tsv\", header=None, dtype=str, index_col=False, sep='\\t')\ndf_rna = samplesheet.loc[samplesheet[\"DataType\"]==\"rna\"]\nwith open(\"gex_genome.txt\", \"w\") as fout:\n    if (not df_rna.empty) and (\"true\" == \"true\"):\n        if df_rna[\"Reference\"].nunique() == 1:\n            gex_genome_keyword = df_rna[\"Reference\"].values[0]\n            if gex_genome_keyword in df_gmty[0].values:\n                fout.write(gex_genome_keyword)\n            else:\n                fout.write(\"null\")\n        else:\n            raise Exception(\"If writing to DataSetDB, all libraries of 'rna' type must have the same reference genome!\")\n    else:\n        fout.write(\"null\")\n\n# Generate genome names for ATAC and VDJ libraries.\nvdj_dict = dict()\nvdj_dict[\"GRCh38_vdj_v7.0.0\"] = \"human\"\nvdj_dict[\"GRCm38_vdj_v7.0.0\"] = \"mouse\"\nvdj_dict[\"GRCh38_vdj_v5.0.0\"] = \"human\"\nvdj_dict[\"GRCm38_vdj_v5.0.0\"] = \"mouse\"\n\natac_dict = dict()\natac_dict[\"GRCh38-2020-A_arc_v2.0.0\"] = \"GRCh38\"\natac_dict[\"mm10-2020-A_arc_v2.0.0\"] = \"GRCm38\"\n\ndf_atac = samplesheet.loc[samplesheet[\"DataType\"]==\"atac\"]\nwith open(\"atac_genome.txt\", \"w\") as fout:\n    if not df_atac.empty:\n        if df_atac[\"Reference\"].nunique() != 1:\n            raise Exception(\"ATAC libraries must have the same Reference!\")\n        fout.write(df_atac[\"Reference\"].apply(lambda s: atac_dict[s]).values[0]+\"\\n\")\n    else:\n        fout.write(\"null\")\n\ndf_vdj = samplesheet.loc[samplesheet[\"DataType\"]==\"vdj\"]\nif not df_vdj.empty:\n    df_vdj[\"Reference\"].apply(lambda s: vdj_dict[s]).to_csv(\"vdj_species.txt\", index=False, header=False)\nelse:\n    with open(\"vdj_species.txt\", \"w\") as fout:\n        fout.write(\"null\")\n\n# Generate Cellranger input sample sheet.\ndf_cellranger = samplesheet.copy()\nif \"Sample\" in df_cellranger.columns:\n    df_cellranger.drop(columns=[\"Sample\"], inplace=True)\ndf_cellranger.rename(columns={\"Library\": \"Sample\"}, inplace=True)\ndf_cellranger.to_csv(\"cellranger_sample_sheet.csv\", index=False)\nCODE",
                "shardIndex": -1,
                "runtimeAttributes": {
                    "preemptible": "2",
                    "failOnStderr": "false",
                    "bootDiskSizeGb": "10",
                    "disks": "local-disk 10 SSD",
                    "continueOnReturnCode": "0",
                    "docker": "quay.io/cumulus/config:0.3",
                    "maxRetries": "0",
                    "cpu": "1",
                    "cpuMin": "1",
                    "memoryMin": "2 GB",
                    "memory": "2 GB",
                    "noAddress": "false",
                    "zones": "us-west1-a,us-west1-b,us-west1-c"
                },
                "callCaching": {
                    "allowResultReuse": true,
                    "effectiveCallCachingMode": "WriteCache",
                    "hashes": {
                        "output count": "E4DA3B7FBBCE2345D7772B0674A318D5",
                        "runtime attribute": {
                            "docker": "DE16FE108CDC7894EECBF282919833A1",
                            "continueOnReturnCode": "CFCD208495D565EF66E7DFF9F98764DA",
                            "failOnStderr": "68934A3E9455FA72420237EB05902327"
                        },
                        "output expression": {
                            "File cellranger_sample_sheet": "03742E29928E2AD4111F22C6FEAA13DC",
                            "Array(String) vdj_species": "D5669DAD08BF7F23C655F6E477EE1276",
                            "File mapping_csv": "34AB68E035552EFC40B6788255AA7546",
                            "String gex_genome": "97AD970A745E86E0D07FC89B7174D852",
                            "String atac_genome": "D05B89539696275538E9ADF168AD7CFA"
                        },
                        "input count": "45C48CCE2E2D7FBDEA1AFC51C7C6AD26",
                        "backend name": "85D6F63859525E464173387636E20324",
                        "command template": "C892D8741A28A871EBBEEEA5024510E3",
                        "input": {
                            "String backend": "BBA84D7E9B86CDDDD0F28E151CC0B1B9",
                            "String zones": "6E9D44E9401D527479E1A5FAD8BB5F4A",
                            "Int preemptible": "C81E728D9D4C2F636F067F89CC14862C",
                            "String config_version": "52B175C1E6F817E63016E657F5B1D223",
                            "File gmty_index_file": "RKn3NA==",
                            "File input_csv_file": "F3MD5w==",
                            "String awsQueueArn": "951A5407643F984323D0C9FC47D4B20C",
                            "Boolean write_to_dsdb": "B326B5062B2F0E69046810717534CB09",
                            "String docker_registry": "EDD1C88A732148E87A5D626390343097"
                        }
                    }
                },
                "inputs": {
                    "preemptible": 2,
                    "awsQueueArn": "arn:aws:batch:us-west-2:752311211819:job-queue/priority-gred-cumulus",
                    "docker_registry": "quay.io/cumulus",
                    "gmty_index_file": "gs://gred-cumulus-ref/resources/gmty_index.tsv",
                    "write_to_dsdb": true,
                    "zones": "us-west1-a us-west1-b us-west1-c",
                    "input_csv_file": "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/uploads/samplesheet_SAM24456643_1.csv",
                    "backend": "gcp",
                    "config_version": "0.3"
                },
                "labels": {
                    "wdl-task-name": "generate_cellranger_config",
                    "cromwell-workflow-id": "cromwell-71255a37-0949-43d8-827a-ef2164d643cf"
                },
                "jobId": "projects/gred-cumulus-sb-01-991a49c4/operations/10311800256032517443",
                "backend": "PAPIv2",
                "backendStatus": "Success",
                "compressedDockerSize": 82838922,
                "jes": {
                    "endpointUrl": "https://genomics.googleapis.com/",
                    "machineType": "custom-1-2048",
                    "googleProject": "gred-cumulus-sb-01-991a49c4",
                    "executionBucket": "gs://gred-cumulus-output/cromwell_execution",
                    "zone": "us-west1-a",
                    "instanceName": "google-pipelines-worker-c8482e28d2d572eae65f9b6886528f68"
                },
                "outputs": {
                    "cellranger_sample_sheet": "gs://gred-cumulus-output/cromwell_execution/cellranger_workflow/71255a37-0949-43d8-827a-ef2164d643cf/call-generate_cellranger_config/cellranger_sample_sheet.csv",
                    "vdj_species": [
                        "null"
                    ],
                    "atac_genome": "null",
                    "gex_genome": "null",
                    "mapping_csv": "gs://gred-cumulus-output/cromwell_execution/cellranger_workflow/71255a37-0949-43d8-827a-ef2164d643cf/call-generate_cellranger_config/mapping.csv"
                },
                "backendLabels": {
                    "wdl-task-name": "generate-cellranger-config",
                    "cromwell-workflow-id": "cromwell-71255a37-0949-43d8-827a-ef2164d643cf"
                },
                "returnCode": 0,
                "end": "2024-07-02T23:27:25.890Z",
                "dockerImageUsed": "quay.io/cumulus/config@sha256:4ad80d9fe336b4e51ebabce8e94055d13374cb83dab0e395e8257912194104c2",
                "stderr": "gs://gred-cumulus-output/cromwell_execution/cellranger_workflow/71255a37-0949-43d8-827a-ef2164d643cf/call-generate_cellranger_config/stderr",
                "callRoot": "gs://gred-cumulus-output/cromwell_execution/cellranger_workflow/71255a37-0949-43d8-827a-ef2164d643cf/call-generate_cellranger_config",
                "attempt": 1,
                "executionEvents": [
                    {
                        "startTime": "2024-07-02T23:26:54.734Z",
                        "description": "Worker released",
                        "endTime": "2024-07-02T23:26:54.734Z"
                    },
                    {
                        "startTime": "2024-07-02T23:27:25.882Z",
                        "description": "UpdatingJobStore",
                        "endTime": "2024-07-02T23:27:25.890Z"
                    },
                    {
                        "startTime": "2024-07-02T23:22:39.153Z",
                        "description": "Pending",
                        "endTime": "2024-07-02T23:22:39.153Z"
                    },
                    {
                        "description": "ContainerSetup",
                        "startTime": "2024-07-02T23:25:51.866Z",
                        "endTime": "2024-07-02T23:25:53.246Z"
                    },
                    {
                        "description": "Localization",
                        "startTime": "2024-07-02T23:25:54.691Z",
                        "endTime": "2024-07-02T23:26:27.634Z"
                    },
                    {
                        "description": "UserAction",
                        "startTime": "2024-07-02T23:26:27.685Z",
                        "endTime": "2024-07-02T23:26:29.212Z"
                    },
                    {
                        "description": "Pulling \"quay.io/cumulus/config@sha256:4ad80d9fe336b4e51ebabce8e94055d13374cb83dab0e395e8257912194104c2\"",
                        "startTime": "2024-07-02T23:25:41.927Z",
                        "endTime": "2024-07-02T23:25:51.866Z"
                    },
                    {
                        "startTime": "2024-07-02T23:27:23.228Z",
                        "description": "UpdatingCallCache",
                        "endTime": "2024-07-02T23:27:25.882Z"
                    },
                    {
                        "description": "Delocalization",
                        "startTime": "2024-07-02T23:26:29.754Z",
                        "endTime": "2024-07-02T23:26:54.734Z"
                    },
                    {
                        "startTime": "2024-07-02T23:24:33.389Z",
                        "description": "waiting for quota",
                        "endTime": "2024-07-02T23:24:47.393Z"
                    },
                    {
                        "startTime": "2024-07-02T23:24:18.850Z",
                        "description": "RunningJob",
                        "endTime": "2024-07-02T23:24:33.389Z"
                    },
                    {
                        "startTime": "2024-07-02T23:24:47.393Z",
                        "description": "Worker \"google-pipelines-worker-c8482e28d2d572eae65f9b6886528f68\" assigned in \"us-west1-a\" on a \"custom-1-2048\" machine",
                        "endTime": "2024-07-02T23:25:26.602Z"
                    },
                    {
                        "description": "Background",
                        "startTime": "2024-07-02T23:25:53.803Z",
                        "endTime": "2024-07-02T23:25:54.358Z"
                    },
                    {
                        "startTime": "2024-07-02T23:22:39.153Z",
                        "description": "RequestingExecutionToken",
                        "endTime": "2024-07-02T23:22:45.633Z"
                    },
                    {
                        "startTime": "2024-07-02T23:22:45.633Z",
                        "description": "WaitingForValueStore",
                        "endTime": "2024-07-02T23:22:45.633Z"
                    },
                    {
                        "description": "Pulling \"gcr.io/google.com/cloudsdktool/cloud-sdk:354.0.0-alpine\"",
                        "startTime": "2024-07-02T23:25:26.602Z",
                        "endTime": "2024-07-02T23:25:41.927Z"
                    },
                    {
                        "startTime": "2024-07-02T23:22:45.633Z",
                        "description": "PreparingJob",
                        "endTime": "2024-07-02T23:24:18.850Z"
                    },
                    {
                        "startTime": "2024-07-02T23:26:54.734Z",
                        "description": "Complete in GCE / Cromwell Poll Interval",
                        "endTime": "2024-07-02T23:27:23.228Z"
                    }
                ],
                "backendLogs": {
                    "log": "gs://gred-cumulus-output/cromwell_execution/cellranger_workflow/71255a37-0949-43d8-827a-ef2164d643cf/call-generate_cellranger_config/generate_cellranger_config.log"
                },
                "start": "2024-07-02T23:22:39.153Z"
            }
        ]
    },
    "outputs": {
        "cellranger_workflow.output_changeo_directory": null,
        "cellranger_workflow.count_outputs": {
            "fbc": null,
            "atac": null,
            "arc": null,
            "adt": [
                "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238830_SAM24456643",
                "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238854_SAM24456643",
                "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238831_SAM24456643",
                "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238855_SAM24456643",
                "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238832_SAM24456643",
                "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238856_SAM24456643",
                "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238833_SAM24456643",
                "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238857_SAM24456643"
            ],
            "vdj": null,
            "multi": null,
            "gex": [
                "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238806_SAM24456643",
                "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238807_SAM24456643",
                "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238808_SAM24456643",
                "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/LIB6238809_SAM24456643"
            ]
        },
        "cellranger_workflow.archr_atac_output_dir": null,
        "cellranger_workflow.count_matrix": "gs://gred-cumulus-output/cromwell_execution/cellranger_workflow/71255a37-0949-43d8-827a-ef2164d643cf/call-cellranger_workflow/cellranger_workflow/a7cbed0d-3a48-4aeb-b4ce-7567159466e4/call-generate_count_config/count_matrix.csv",
        "cellranger_workflow.dsdb_info": [
            {
                "type": "GEX",
                "id": "DS000017732",
                "version": "1"
            }
        ],
        "cellranger_workflow.dsdb_info_json": "gs://gred-cumulus-output/cromwell_execution/cellranger_workflow/71255a37-0949-43d8-827a-ef2164d643cf/call-cellranger_dsdb/cellranger_dsdb/2958a2cb-82b7-4e64-8967-37d0b42baf6b/call-organize_dsdb_info/dsdb_info.json",
        "cellranger_workflow.archr_arc_output_dir": null,
        "cellranger_workflow.fastq_outputs": [
            null,
            null,
            null
        ]
    },
    "workflowRoot": "gs://gred-cumulus-output/cromwell_execution/cellranger_workflow/71255a37-0949-43d8-827a-ef2164d643cf/",
    "actualWorkflowLanguage": "WDL",
    "status": "Succeeded",
    "end": "2024-07-03T04:48:53.087Z",
    "start": "2024-07-02T23:22:32.181Z",
    "id": "71255a37-0949-43d8-827a-ef2164d643cf",
    "inputs": {
        "cellranger_version": "7.2.0",
        "dsdb_project_description": "Production scale screen in DLD-1 cells with 1/4 of the genome-wide CRISPR library (sub-lib-3, ~22K guides). 1 time point: Day-5. We performed 24 rxns of 10x 3' HT kit with an estimated loading of 52K cells. We performed a pilot study to test the library quality before the production-level sequencing. We will submit 72 libraries (24 GEX, 24 HTO and 24 sgRNA) We request 600M reads for GEX, 20M for HTO and 40M for sgRNA, after finishing QC sequencing of NGS5887. NGS has built the GEX and sgRNA libraries using automation, we will provide manually constructed HTO libraries.",
        "archr_version": "1.0.1",
        "dsdb_disk_space": 5000,
        "cellranger_atac_version": "2.1.0",
        "count_disk_space": 500,
        "minFrags": "1000",
        "dsdb_testing": false,
        "vdj_disk_space": 500,
        "mkfastq_force_single_index": false,
        "atac_num_cpu": 32,
        "include_introns": true,
        "multi_disk_space": 1500,
        "cumulus_feature_barcoding_version": "0.11.2",
        "arrow_prj_num_cpu": 8,
        "arc_disk_space": 700,
        "cmo_set": null,
        "preemptible": 2,
        "feature_disk_space": 100,
        "mkfastq_delete_undetermined": false,
        "archr_memory": "32G",
        "maxFrags": "Inf",
        "max_mismatch": 0,
        "vdj_chain": "auto",
        "force_cells": null,
        "run_mkfastq": false,
        "num_cpu": 32,
        "vdj_denovo": false,
        "atac_dim_reduce": "lsa",
        "aws_job_queue": "arn:aws:batch:us-west-2:752311211819:job-queue/priority-gred-cumulus",
        "run_archr": true,
        "scaffold_sequence": "",
        "mkfastq_filter_single_index": false,
        "dsdb_project_authors": "melocars,ghaffars,borozani",
        "no_bam": false,
        "arc_min_gex_count": null,
        "arc_min_atac_count": null,
        "secondary": false,
        "arc_num_cpu": 32,
        "expect_cells": 20000,
        "cellranger_arc_version": "2.0.2",
        "archr_disk_space": 50,
        "dsdb_memory": "120G",
        "output_directory": "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/",
        "feature_num_cpu": 4,
        "arc_gex_exclude_introns": false,
        "arrow_num_cpu": 8,
        "atac_disk_space": 500,
        "docker_registry": "quay.io/cumulus",
        "mkfastq_barcode_mismatches": null,
        "crispr_barcode_pos": 19,
        "run_immcantation": true,
        "atac_memory": "120G",
        "arc_memory": "160G",
        "mkfastq_use_bases_mask": null,
        "run_count": true,
        "input_csv_file": "gs://gred-melo-carlos-lab/NGS5888/SAM24456643_1/uploads/samplesheet_SAM24456643_1.csv",
        "mkfastq_disk_space": 1500,
        "config_version": "0.3",
        "dsdb_num_cpu": 4,
        "delete_input_bcl_directory": false,
        "minTSS": "4",
        "feature_memory": "32G",
        "peaks": null,
        "write_to_dsdb": true,
        "immcantation_version": "4.3.0",
        "min_read_ratio": 0.1,
        "memory": "120G",
        "dsdb_project_title": "Recursion DLD1 Library3- Screen2 (NGS5888)"
    },
    "labels": {
        "cromwell-workflow-id": "cromwell-71255a37-0949-43d8-827a-ef2164d643cf",
        "creator": "ghaffars"
    },
    "submission": "2024-07-02T23:22:18.157Z"
}